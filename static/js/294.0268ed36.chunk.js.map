{"version":3,"file":"static/js/294.0268ed36.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Sort/Sort.module.css?d8cd","components/Sort/Sort.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Buttons/Buttons.module.css?0481","components/Buttons/Buttons.jsx","components/ContactList/ContactList.jsx","services/contactListFunc.js","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"inputLabel\":\"ContactForm_inputLabel__LEeFC\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formBtn\":\"ContactForm_formBtn__qZGY3\"};","export const getContacts = state => state.contacts.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getSortOptions = state => state.contacts.sortOptions;\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\nexport const getError = state => state.contacts.contacts.error;","import css from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { getContacts } from 'redux/contacts/contactsSelectors';\n\nexport const ContactForm = () => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = state;\n    const newContact = {\n      name,\n      number,\n    };\n    const existingContact = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n    if (existingContact) {\n      alert(`${name} or ${number} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    setState({ name: '', number: '' });\n  };\n\n  const onChange = e => {\n    const trimmedValue = e.target.value\n      .split(' ')\n      .map(str => str.trim())\n      .join(' ');\n\n    setState(prevState => ({\n      ...prevState,\n      [e.target.name]: trimmedValue,\n    }));\n  };\n\n  return (\n    <section className={css.formSection}>\n      <form className={css.contactForm} onSubmit={handleSubmit}>\n        <label className={(css.inputNameLabel, css.inputLabel)}>\n          Name\n          <input\n            className={(css.inputName, css.formInput)}\n            onChange={onChange}\n            value={state.name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n            required\n          />\n        </label>\n        <label className={(css.inputNumLabel, css.inputLabel)}>\n          Number\n          <input\n            className={(css.inputNum, css.formInput)}\n            onChange={onChange}\n            value={state.number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={css.formBtn} type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"Filter_filterContainer__8G57N\",\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import css from './Filter.module.css';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\n\nexport const Filter = () => {\n  const [state, setState] = useState({\n    input: '',\n  });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(filterContacts(state.input));\n  }, [state.input, dispatch]);\n\n  const onChange = e => {\n    setState(prevState => ({\n      ...prevState,\n      input: e.target.value,\n    }));\n  };\n\n  return (\n    <section className={css.filterSection}>\n      <div className={css.filterContainer}>\n        <p className={css.filterTitle}>Search contacts by name or number</p>\n        <input\n          className={css.filterInput}\n          type=\"text\"\n          onChange={onChange}\n          value={state.input}\n        ></input>\n      </div>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"sortContainer\":\"Sort_sortContainer__2DpMN\",\"sortOptionContainer\":\"Sort_sortOptionContainer__IMYq3\",\"sortWrapper\":\"Sort_sortWrapper__VqLXH\",\"sortTitle\":\"Sort_sortTitle__YmJcn\",\"sortOption\":\"Sort_sortOption__dF0Zh\",\"sortButton\":\"Sort_sortButton__CPLkG\",\"switch\":\"Sort_switch__4uxDt\",\"slider\":\"Sort_slider__9FHYi\"};","import css from './Sort.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowDownAZ,\n  faArrowDownZA,\n} from '@fortawesome/free-solid-svg-icons';\nimport { sortContacts } from 'redux/contacts/contactsSlice';\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\n\nexport const Sort = () => {\n  const [isChecked, setIsChecked] = useState({\n    name: false,\n    order: false,\n  });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(sortContacts(isChecked));\n  }, [isChecked, dispatch]);\n\n  const onChange = event => {\n    const value = event.target.dataset.value;\n    const checked = event.target.checked;\n\n    setIsChecked(prevState => ({\n      ...prevState,\n      [value]: checked,\n    }));\n  };\n\n  return (\n    <section className={css.sortSection}>\n      <div className={css.sortContainer}>\n        <p className={css.sortTitle}>Sort contacts by name</p>\n        <div className={css.sortOptionContainer}>\n          <p className={css.sortOption}>First Name</p>\n          <div className={css.sortWrapper}>\n            <label className={css.switch}>\n              <input\n                data-value=\"name\"\n                type=\"checkbox\"\n                onChange={onChange}\n              ></input>\n              <span className={css.slider}></span>\n            </label>\n          </div>\n          <p className={css.sortOption}>Last Name</p>\n        </div>\n        <div className={css.sortOptionContainer}>\n          <FontAwesomeIcon\n            icon={faArrowDownAZ}\n            size=\"lg\"\n            style={{ color: '#4e4e4e' }}\n          />\n          <div className={css.sortWrapper}>\n            <label className={css.switch}>\n              <input\n                data-value=\"order\"\n                type=\"checkbox\"\n                onChange={onChange}\n              ></input>\n              <span className={css.slider}></span>\n            </label>\n          </div>\n          <FontAwesomeIcon\n            icon={faArrowDownZA}\n            size=\"lg\"\n            style={{ color: '#4e4e4e' }}\n          />\n        </div>\n      </div>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsListSection\":\"ContactList_contactsListSection__cWqG0\",\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactItemNumer\":\"ContactList_contactItemNumer__VuqTQ\",\"contactsTable\":\"ContactList_contactsTable__dYkGk\",\"editableContact\":\"ContactList_editableContact__AOyjp\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactItemBtn\":\"Buttons_contactItemBtn__ykTTg\"};","import css from './Buttons.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nexport const Buttons = ({\n  editableContactId,\n  contactId,\n  handleSaveClick,\n  handleEditClick,\n  handleCancelClick,\n}) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      {editableContactId === contactId ? (\n        <>\n          <button\n            className={css.contactItemBtn}\n            onClick={() => handleSaveClick(contactId)}\n          >\n            Save\n          </button>\n          <button className={css.contactItemBtn} onClick={handleCancelClick}>\n            Cancel\n          </button>\n        </>\n      ) : (\n        <>\n          <button\n            className={css.contactItemBtn}\n            onClick={() => handleEditClick(contactId)}\n          >\n            Edit\n          </button>\n          <button\n            className={css.contactItemBtn}\n            onClick={() => dispatch(deleteContact(contactId))}\n          >\n            Delete\n          </button>\n        </>\n      )}\n    </>\n  );\n};\n","import css from './ContactList.module.css';\nimport ContentEditable from 'react-contenteditable';\n// import sanitize from 'sanitize-html';\nimport { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport { sortContactsList, filterContactsList } from 'services/contactListFunc';\nimport { Buttons } from 'components/Buttons/Buttons';\nimport {\n  getContacts,\n  getFilter,\n  getSortOptions,\n} from 'redux/contacts/contactsSelectors';\n\nexport const ContactList = () => {\n  const [editableContactId, setEditableContactId] = useState(null);\n  const editedContactsRef = useRef({});\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const sortOptions = useSelector(getSortOptions);\n  const sortedContacts = sortContactsList(contacts, sortOptions);\n  const filteredContacts = filterContactsList(sortedContacts, filter);\n\n  const handleEditClick = id => {\n    setEditableContactId(id);\n    editedContactsRef.current[id] = {\n      ...contacts.find(contact => contact.id === id),\n    };\n  };\n\n  const handleCancelClick = () => {\n    setEditableContactId(null);\n    editedContactsRef.current = {};\n  };\n\n  const handleSaveClick = id => {\n    dispatch(\n      updateContact({ editedContact: editedContactsRef.current[id] })\n    );\n    setEditableContactId(null);\n    editedContactsRef.current = {};\n  };\n\n  const handleContactChange = (e, id) => {\n    const value = e.target.value;\n    const dataset = e.currentTarget.dataset.value;\n    // const sanitizedValue = sanitize(value);\n    editedContactsRef.current[id][dataset] = value;\n  };\n\n  return (\n    <section className={css.contactsListSection}>\n      <table className={css.contactsTable}>\n        <thead>\n          <tr>\n            <th colSpan={3}>\n              <h1>Contacts</h1>\n            </th>\n          </tr>\n          <tr>\n            <th>Name</th>\n            <th>Number</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredContacts.length > 0 ? (\n            <>\n              {filteredContacts.map(contact => (\n                <tr key={contact.id}>\n                  <td>\n                    {' '}\n                    {editableContactId === contact.id ? (\n                      <ContentEditable\n                        className={css.editableContact}\n                        html={contact.name}\n                        disabled={false}\n                        data-value=\"name\"\n                        onChange={e => handleContactChange(e, contact.id)}\n                      />\n                    ) : (\n                      contact.name\n                    )}\n                  </td>\n                  <td>\n                    {editableContactId === contact.id ? (\n                      <ContentEditable\n                        className={css.editableContact}\n                        html={contact.number}\n                        disabled={false}\n                        data-value=\"number\"\n                        onChange={e => handleContactChange(e, contact.id)}\n                      />\n                    ) : (\n                      contact.number\n                    )}\n                  </td>\n                  <td>\n                    <Buttons\n                      contactId={contact.id}\n                      editableContactId={editableContactId}\n                      handleEditClick={handleEditClick}\n                      handleCancelClick={handleCancelClick}\n                      handleSaveClick={handleSaveClick}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </>\n          ) : (\n            <tr>\n              <td colSpan={3} className={css.noContacts}>\n                No contacts meet search criteria.\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </section>\n  );\n};\n","export const sortContactsList = (contacts, sortOptions) => {\n  const { name, order } = sortOptions;\n  let sortName = name ? 'lastName' : 'firstName';\n  let sortOrder = order ? 'desc' : 'asc';\n  const sortedContacts = [...contacts].sort((a, b) => {\n    let nameA;\n    let nameB;\n    if (sortName === 'firstName') {\n      nameA = a.name.split(' ')[0];\n      nameB = b.name.split(' ')[0];\n    } else if (sortName === 'lastName') {\n      nameA = a.name.split(' ');\n      nameB = b.name.split(' ');\n      nameA = nameA[nameA.length - 1];\n      nameB = nameB[nameB.length - 1];\n    }\n    return sortOrder === 'asc'\n      ? nameA.localeCompare(nameB)\n      : nameB.localeCompare(nameA);\n  });\n  return sortedContacts;\n};\n\nexport const filterContactsList = (sortedContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return !normalizedFilter ? sortedContacts : sortedContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter) ||\n    contact.number.includes(normalizedFilter)\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsTitle\":\"Contacts_contactsTitle__9axPf\"};","import { ContactForm } from 'components/ContactForm/ContactForm.jsx';\nimport { Filter } from 'components/Filter/Filter.jsx';\nimport { Sort } from 'components/Sort/Sort.jsx';\nimport { ContactList } from 'components/ContactList/ContactList.jsx';\nimport css from './Contacts.module.css';\nimport { useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations.js';\nimport { getContacts } from 'redux/contacts/contactsSelectors.js';\n\nexport const Contacts = () => {\n  const [onMount, setOnMount] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n    setOnMount(false);\n  }, [dispatch]);\n\n  const contacts = useSelector(getContacts);\n\n  return (\n    <section className={css.contacts}>\n      <h1 className={css.contactsTitle}>Phonebook</h1>\n      <ContactForm />\n      {onMount ? (\n        <h5>Loading...</h5>\n      ) : contacts.length >= 2 ? (\n        <>\n          <Filter />\n          <Sort />\n          <ContactList />\n        </>\n      ) : contacts.length === 1 ? (\n        <ContactList />\n      ) : contacts.length < 1 ? (\n        <h5>\n          No contacts found. Complete the above form to begin adding contacts.\n        </h5>\n      ) : null}\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getSortOptions","sortOptions","ContactForm","useState","name","number","setState","dispatch","useDispatch","useSelector","onChange","e","trimmedValue","target","value","split","map","str","trim","join","prevState","className","css","onSubmit","preventDefault","newContact","find","contact","toLowerCase","alert","addContact","type","pattern","title","required","Filter","input","useEffect","filterContacts","Sort","order","isChecked","setIsChecked","sortContacts","event","dataset","checked","icon","faArrowDownAZ","size","style","color","faArrowDownZA","Buttons","editableContactId","contactId","handleSaveClick","handleEditClick","handleCancelClick","onClick","deleteContact","ContactList","setEditableContactId","editedContactsRef","useRef","sortedContacts","sortName","sortOrder","sort","a","b","nameA","nameB","length","localeCompare","sortContactsList","filteredContacts","normalizedFilter","includes","filterContactsList","id","current","updateContact","editedContact","handleContactChange","currentTarget","colSpan","html","disabled","Contacts","onMount","setOnMount","fetchContacts"],"sourceRoot":""}