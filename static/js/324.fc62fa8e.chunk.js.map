{"version":3,"file":"static/js/324.fc62fa8e.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.css?d5f2","redux/contacts/contactsSelectors.js","hooks/useContacts.jsx","components/ContactsForm/ContactsForm.jsx","components/ContactsFilter/ContactsFilter.jsx","webpack://react-homework-template/./src/components/ContactsSort/ContactsSort.module.css?4c53","components/ContactsSort/ContactsSort.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactsItemsActions/ContactsItemActions.module.css?9be5","components/ContactsItemsActions/ContactsItemActions.jsx","components/ContactList/ContactList.jsx","services/contactListFunc.js","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"addContactButton\":\"ContactsForm_addContactButton__eAEyH\",\"inputBox\":\"ContactsForm_inputBox__og9Yo\",\"input\":\"ContactsForm_input__UjXFK\"};","export const getContacts = state => state.contacts.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getSortOptions = state => state.contacts.sortOptions;\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\nexport const getError = state => state.contacts.contacts.error;","import { useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getFilter,\n  getSortOptions,\n  getError,\n  getIsLoading,\n} from 'redux/contacts/contactsSelectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const sortOptions = useSelector(getSortOptions);\n  const error = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n\n  return {\n    contacts,\n    filter,\n    sortOptions,\n    error,\n    isLoading,\n  };\n};\n","import css from './ContactsForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { useContacts } from 'hooks/useContacts';\nimport Box from '@mui/material/Box';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport DialpadIcon from '@mui/icons-material/Dialpad';\nimport TextField from '@mui/material/TextField';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport SaveIcon from '@mui/icons-material/Save';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Notify } from 'notiflix';\n\nexport function ContactsForm() {\n  const [loading, setLoading] = useState(false);\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  const handleClick = e => {\n    e.preventDefault();\n    setLoading(true);\n    const { name, number } = state;\n    const newContact = {\n      name,\n      number,\n    };\n\n    const existingContact = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n\n    if (existingContact) {\n      Notify.warning(`${name} or ${number} is already in contacts`);\n      setLoading(false);\n      return;\n    } else if (!name || !number) {\n      Notify.failure('Please fill out all fields');\n      setLoading(false);\n      return;\n    } else {\n      dispatch(addContact(newContact)).then(() => setLoading(false));\n      setState({ name: '', number: '' });\n    }\n  };\n\n  const handleChange = e => {\n    const trimmedValue = e.target.value\n      .split(' ')\n      .map(str => str.trim())\n      .join(' ');\n\n    setState(prevState => ({\n      ...prevState,\n      [e.target.name]: trimmedValue,\n    }));\n  };\n\n  return (\n    <Box>\n      <Box className={css.inputBox}>\n        <TextField\n          className={css.input}\n          name=\"name\"\n          label=\"Contact Name\"\n          onChange={handleChange}\n          value={state.name}\n          type=\"text\"\n          required\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <AccountCircle />\n              </InputAdornment>\n            ),\n          }}\n          variant=\"standard\"\n        />\n        <TextField\n          className={css.input}\n          name=\"number\"\n          label=\"Contact Number\"\n          onChange={handleChange}\n          value={state.number}\n          type=\"tel\"\n          required\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <DialpadIcon />\n              </InputAdornment>\n            ),\n          }}\n          variant=\"standard\"\n        />\n      </Box>\n      <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n        <LoadingButton\n          className={css.addContactButton}\n          onClick={handleClick}\n          loading={loading}\n          loadingPosition=\"center\"\n          startIcon={<SaveIcon />}\n          variant=\"contained\"\n          type=\"submit\"\n        >\n          <span>Save</span>\n        </LoadingButton>\n      </Box>\n    </Box>\n  );\n}\n","import Box from '@mui/material/Box';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport TextField from '@mui/material/TextField';\nimport FilterAltIcon from '@mui/icons-material/FilterAlt';\n\nexport function ContactsFilter() {\n   const [state, setState] = useState({\n     input: '',\n   });\n   const dispatch = useDispatch();\n\n   useEffect(() => {\n     dispatch(filterContacts(state.input));\n   }, [state.input, dispatch]);\n\n   const onChange = e => {\n     setState(prevState => ({\n       ...prevState,\n       input: e.target.value,\n     }));\n   };\n  \n  return (\n    <Box sx={{ width: '100%', marginTop: \"20px\" }}>\n      <TextField\n        label=\"Filter Name or Number\"\n        id=\"outlined-start-adornment\"\n        sx={{ width: '100%' }}\n        variant=\"filled\"\n        onChange={onChange}\n        value={state.input}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <FilterAltIcon />\n            </InputAdornment>\n          ),\n        }}\n      />\n    </Box>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"sortToggleSection\":\"ContactsSort_sortToggleSection__HQBhm\",\"sortToggleContainer\":\"ContactsSort_sortToggleContainer__uHAxq\"};","import css from './ContactsSort.module.css';\nimport { useState, useEffect } from 'react';\nimport Divider from '@mui/material/Divider';\nimport Paper from '@mui/material/Paper';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport TextRotateUpIcon from '@mui/icons-material/TextRotateUp';\nimport TextRotationDownIcon from '@mui/icons-material/TextRotationDown';\nimport { sortContacts } from 'redux/contacts/contactsSlice';\nimport { useDispatch } from 'react-redux';\nimport { Box } from '@mui/material';\n\nexport function ContactsSort() {\n  const [sortMethod, setSortMethod] = useState({\n    name: 'firstName',\n    order: 'asc',\n  });\n  const [optionAlignment, setOptionAlignment] = useState('left');\n  const [orderAlignment, setOrderAlignment] = useState('left');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(sortContacts(sortMethod));\n  }, [sortMethod, dispatch]);\n\n  const handleChange = e => {\n    const target = e.target.closest('button').id;\n\n    switch (target) {\n      case 'firstName':\n        setOptionAlignment('left');\n        setSortMethod(prevState => ({\n          ...prevState,\n          name: 'firstName',\n        }));\n        break;\n      case 'lastName':\n        setOptionAlignment('right');\n        setSortMethod(prevState => ({\n          ...prevState,\n          name: 'lastName',\n        }));\n        break;\n      case 'asc':\n        setOrderAlignment('left');\n        setSortMethod(prevState => ({\n          ...prevState,\n          order: 'asc',\n        }));\n        break;\n      case 'desc':\n        setOrderAlignment('right');\n        setSortMethod(prevState => ({\n          ...prevState,\n          order: 'desc',\n        }));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Box className={css.sortToggleSection}>\n      <Paper\n        className={css.sortToggleContainer}\n        elevation={4}\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <ToggleButtonGroup\n          color=\"primary\"\n          size=\"small\"\n          value={optionAlignment}\n          exclusive\n          onChange={handleChange}\n          aria-label=\"text alignment\"\n        >\n          <ToggleButton id=\"firstName\" value=\"left\" aria-label=\"left aligned\">\n            <FirstPageIcon />\n          </ToggleButton>\n          <ToggleButton id=\"lastName\" value=\"right\" aria-label=\"right aligned\">\n            <LastPageIcon />\n          </ToggleButton>\n        </ToggleButtonGroup>\n        <Divider\n          variant=\"inset\"\n          flexItem\n          orientation=\"vertical\"\n          sx={{ mx: 1, my: 0.5, color: '#007bff' }}\n        />\n        <ToggleButtonGroup\n          color=\"primary\"\n          size=\"small\"\n          value={orderAlignment}\n          exclusive\n          onChange={handleChange}\n          aria-label=\"text alignment\"\n        >\n          <ToggleButton id=\"asc\" value=\"left\" aria-label=\"left aligned\">\n            <TextRotationDownIcon />\n          </ToggleButton>\n          <ToggleButton id=\"desc\" value=\"right\" aria-label=\"right aligned\">\n            <TextRotateUpIcon />\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </Paper>\n    </Box>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsListSection\":\"ContactList_contactsListSection__cWqG0\",\"contactListItem\":\"ContactList_contactListItem__3th7-\",\"editableContact\":\"ContactList_editableContact__AOyjp\",\"contactName\":\"ContactList_contactName__wLcl6\",\"contactNumber\":\"ContactList_contactNumber__aD17w\"};","// extracted by mini-css-extract-plugin\nexport default {\"speedDial\":\"ContactsItemActions_speedDial__63y41\"};","import { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport StyledSpeedDial from '@mui/material/SpeedDial';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SpeedDialAction from '@mui/material/SpeedDialAction';\nimport EditNoteIcon from '@mui/icons-material/EditNote';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport css from './ContactsItemActions.module.css';\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\n\nconst actions = [\n  { icon: <EditNoteIcon />, tooltip: 'Edit' },\n  { icon: <SaveIcon />, tooltip: 'Save' },\n  { icon: <CancelIcon />, tooltip: 'Cancel' },\n  { icon: <DeleteForeverIcon />, tooltip: 'Delete' },\n];\n\nexport default function ContactsItemActions({\n  editableContactId,\n  contactId,\n  handleSaveClick,\n  handleEditClick,\n  handleCancelClick,\n}) {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const dispatch = useDispatch();\n\n  return (\n    <Box sx={{}}>\n      <StyledSpeedDial\n        sx={{ position: 'relative' }}\n        ariaLabel=\"SpeedDial tooltip example\"\n        className={css.speedDial}\n        icon={<SpeedDialIcon openIcon={<EditIcon />} />}\n        direction=\"left\"\n        onClose={handleClose}\n        onOpen={handleOpen}\n        open={open}\n      >\n        {editableContactId === contactId\n          ? [\n              <SpeedDialAction\n                key=\"save\"\n                className={css.contactItemBtn}\n                icon={actions[1].icon}\n                tooltipTitle={actions[1].tooltip}\n                onClick={() => {\n                  handleSaveClick(contactId);\n                }}\n              />,\n              <SpeedDialAction\n                key=\"cancel\"\n                className={css.contactItemBtn}\n                icon={actions[2].icon}\n                tooltipTitle={actions[2].tooltip}\n                onClick={() => {\n                  handleCancelClick();\n                }}\n              />,\n            ]\n          : [\n              <SpeedDialAction\n                key=\"edit\"\n                className={css.contactItemBtn}\n                icon={actions[0].icon}\n                tooltipTitle={actions[0].tooltip}\n                onClick={() => {\n                  handleEditClick(contactId);\n                }}\n              />,\n              <SpeedDialAction\n                key=\"delete\"\n                className={css.contactItemBtn}\n                icon={actions[3].icon}\n                tooltipTitle={actions[3].tooltip}\n                onClick={() => {\n                  dispatch(deleteContact(contactId));\n                }}\n              />,\n            ]}\n      </StyledSpeedDial>\n    </Box>\n  );\n}\n","import css from './ContactList.module.css';\nimport ContentEditable from 'react-contenteditable';\n// import sanitize from 'sanitize-html';\nimport { useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport { sortContactsList, filterContactsList } from 'services/contactListFunc';\nimport { Notify } from 'notiflix';\nimport { useContacts } from 'hooks/useContacts';\nimport Action from 'components/ContactsItemsActions/ContactsItemActions';\nimport { Paper } from '@mui/material';\n\nexport const ContactList = () => {\n  const [editableContactId, setEditableContactId] = useState(null);\n  const editedContactsRef = useRef({});\n  const dispatch = useDispatch();\n  const { contacts, filter, sortOptions } = useContacts();\n  const sortedContacts = sortContactsList(contacts, sortOptions);\n  const filteredContacts = filterContactsList(sortedContacts, filter);\n\n  const handleEditClick = id => {\n    setEditableContactId(id);\n    editedContactsRef.current[id] = {\n      ...contacts.find(contact => contact.id === id),\n    };\n  };\n\n  const handleCancelClick = () => {\n    setEditableContactId(null);\n    editedContactsRef.current = {};\n  };\n\n  const handleSaveClick = id => {\n    const contactsToCompare = contacts.filter(contact => contact.id !== id);\n\n    const existingContact = contactsToCompare.find(\n      contact =>\n        contact.name.toLowerCase() ===\n          editedContactsRef.current[id].name.toLowerCase() ||\n        contact.number === editedContactsRef.current[id].number\n    );\n\n    if (existingContact) {\n      Notify.failure(\n        `${editedContactsRef.current[id].name} is already in contacts. Please check and resubmit`\n      );\n      return;\n    } else {\n      dispatch(updateContact({ editedContact: editedContactsRef.current[id] }));\n      setEditableContactId(null);\n      editedContactsRef.current = {};\n    }\n  };\n\n  const handleContactChange = (e, id) => {\n    const value = e.target.value;\n    const dataset = e.currentTarget.dataset.value;\n    // const sanitizedValue = sanitize(value);\n    editedContactsRef.current[id][dataset] = value;\n  };\n\n  return (\n    <section className={css.contactsListSection}>\n      <Paper elevation={6} sx={{padding: \"15px\"}} >\n      <ul className={css.contactList}>\n        {filteredContacts.length > 0 ? (\n          filteredContacts.map(contact => (\n            <li key={contact.id} className={css.contactListItem}>\n              <span className={css.contactName}>\n                {editableContactId === contact.id ? (\n                  <ContentEditable\n                    className={css.editableContact}\n                    html={contact.name}\n                    disabled={false}\n                    data-value=\"name\"\n                    onChange={e => handleContactChange(e, contact.id)}\n                  />\n                ) : (\n                  contact.name\n                )}\n              </span>\n              <span className={css.contactNumber}>\n                {editableContactId === contact.id ? (\n                  <ContentEditable\n                    className={css.editableContact}\n                    html={contact.number}\n                    disabled={false}\n                    data-value=\"number\"\n                    onChange={e => handleContactChange(e, contact.id)}\n                  />\n                ) : (\n                  contact.number\n                )}\n              </span>\n              <span className={css.contactAction}>\n                <Action\n                  contactId={contact.id}\n                  editableContactId={editableContactId}\n                  handleEditClick={handleEditClick}\n                  handleCancelClick={handleCancelClick}\n                  handleSaveClick={handleSaveClick}\n                />\n              </span>\n            </li>\n          ))\n        ) : (\n          <li className={css.noContactsItem}>\n            <p colSpan={3} className={css.noContactsText}>\n              No contacts meet search criteria.\n            </p>\n          </li>\n        )}\n      </ul>\n      </Paper>\n    </section>\n  );\n};\n","export const sortContactsList = (contacts, sortOptions) => {\n  const { name, order } = sortOptions;\n  let sortName = name;\n  let sortOrder = order;\n  const sortedContacts = [...contacts].sort((a, b) => {\n    let nameA;\n    let nameB;\n    if (sortName === 'firstName') {\n      nameA = a.name.split(' ')[0];\n      nameB = b.name.split(' ')[0];\n    } else if (sortName === 'lastName') {\n      nameA = a.name.split(' ');\n      nameB = b.name.split(' ');\n      nameA = nameA[nameA.length - 1];\n      nameB = nameB[nameB.length - 1];\n    }\n    return sortOrder === 'asc'\n      ? nameA.localeCompare(nameB)\n      : nameB.localeCompare(nameA);\n  });\n  return sortedContacts;\n};\n\nexport const filterContactsList = (sortedContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return !normalizedFilter ? sortedContacts : sortedContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter) ||\n    contact.number.includes(normalizedFilter)\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsTitle\":\"Contacts_contactsTitle__9axPf\"};","import { ContactsForm } from 'components/ContactsForm/ContactsForm.jsx';\nimport { ContactsFilter } from 'components/ContactsFilter/ContactsFilter.jsx';\nimport { ContactsSort } from 'components/ContactsSort/ContactsSort.jsx';\nimport { ContactList } from 'components/ContactList/ContactList.jsx';\nimport css from './Contacts.module.css';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { useContacts } from 'hooks/useContacts';\nimport { useAuth } from 'hooks/useAuth';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const { contacts, isLoading } = useContacts();\n  const { isLoggedIn, user } = useAuth();\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    } else {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <section className={css.phonebook}>\n      {!isLoading && (\n        <h1 className={css.contactsTitle}>{`${user.name} Contacts`}</h1>\n      )}\n      <ContactsForm />\n      {isLoading && <h5>Loading...</h5>}\n      {contacts.length >= 2 ? (\n        <>\n          <ContactsFilter />\n          <ContactsSort />\n          <ContactList />\n        </>\n      ) : contacts.length === 1 ? (\n        <ContactList />\n      ) : contacts.length < 1 && !isLoading ? (\n        <h5>\n          No contacts found. Complete the above form to begin adding contacts.\n        </h5>\n      ) : null}\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getSortOptions","sortOptions","getIsLoading","isLoading","getError","error","useContacts","useSelector","ContactsForm","useState","loading","setLoading","name","number","setState","dispatch","useDispatch","handleChange","e","trimmedValue","target","value","split","map","str","trim","join","prevState","Box","className","css","TextField","label","onChange","type","required","InputProps","startAdornment","InputAdornment","position","AccountCircle","variant","Dialpad","sx","display","justifyContent","LoadingButton","onClick","preventDefault","newContact","find","contact","toLowerCase","Notify","addContact","then","loadingPosition","startIcon","Save","ContactsFilter","input","useEffect","filterContacts","width","marginTop","id","endAdornment","FilterAlt","ContactsSort","order","sortMethod","setSortMethod","optionAlignment","setOptionAlignment","orderAlignment","setOrderAlignment","sortContacts","closest","Paper","elevation","ToggleButtonGroup","color","size","exclusive","ToggleButton","FirstPage","LastPage","Divider","flexItem","orientation","mx","my","TextRotationDown","TextRotateUp","actions","icon","EditNote","tooltip","Cancel","DeleteForever","ContactsItemActions","editableContactId","contactId","handleSaveClick","handleEditClick","handleCancelClick","open","setOpen","ariaLabel","SpeedDialIcon","openIcon","Edit","direction","onClose","onOpen","SpeedDialAction","tooltipTitle","deleteContact","ContactList","setEditableContactId","editedContactsRef","useRef","sortedContacts","sortName","sortOrder","sort","a","b","nameA","nameB","length","localeCompare","sortContactsList","filteredContacts","normalizedFilter","includes","filterContactsList","current","updateContact","editedContact","handleContactChange","dataset","currentTarget","padding","html","disabled","colSpan","Contacts","useAuth","isLoggedIn","user","fetchContacts"],"sourceRoot":""}