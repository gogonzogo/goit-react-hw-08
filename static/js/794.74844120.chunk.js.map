{"version":3,"file":"static/js/794.74844120.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.css?d5f2","redux/contacts/contactsSelectors.js","hooks/useContacts.jsx","components/ContactsForm/ContactsForm.jsx","components/ContactsFilter/ContactsFilter.jsx","webpack://react-homework-template/./src/components/ContactsSort/ContactsSort.module.css?4c53","components/ContactsSort/ContactsSort.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactsItemActions/ContactsItemActions.module.css?4aaa","components/ContactsItemActions/ContactsItemActions.jsx","components/ContactList/ContactList.jsx","services/contactListFunc.js","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","components/PhonebookActions/PhonebookActions.module.css","components/PhonebookActions/PhonebookActions.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"addContactButton\":\"ContactsForm_addContactButton__eAEyH\",\"inputBox\":\"ContactsForm_inputBox__og9Yo\",\"input\":\"ContactsForm_input__UjXFK\"};","export const getContacts = state => state.contacts.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getSortOptions = state => state.contacts.sortOptions;\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\nexport const getError = state => state.contacts.contacts.error;\nexport const getPhonebookOptions = state => state.contacts.phonebookOptions;","import { useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getFilter,\n  getSortOptions,\n  getError,\n  getIsLoading,\n  getPhonebookOptions,\n} from 'redux/contacts/contactsSelectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const sortOptions = useSelector(getSortOptions);\n  const error = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n  const phonebookOptions = useSelector(getPhonebookOptions);\n\n  return {\n    contacts,\n    filter,\n    sortOptions,\n    error,\n    isLoading,\n    phonebookOptions,\n  };\n};\n","import css from './ContactsForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { useContacts } from 'hooks/useContacts';\nimport Box from '@mui/material/Box';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport DialpadIcon from '@mui/icons-material/Dialpad';\nimport TextField from '@mui/material/TextField';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport SaveIcon from '@mui/icons-material/Save';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Notify } from 'notiflix';\n\nexport function ContactsForm() {\n  const [loading, setLoading] = useState(false);\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  const handleClick = e => {\n    e.preventDefault();\n    setLoading(true);\n    const { name, number } = state;\n    const newContact = {\n      name,\n      number,\n    };\n\n    const existingContact = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n\n    if (existingContact) {\n      Notify.warning(`${name} or ${number} is already in contacts`);\n      setLoading(false);\n      return;\n    } else if (!name || !number) {\n      Notify.failure('Please fill out all fields');\n      setLoading(false);\n      return;\n    } else {\n      dispatch(addContact(newContact)).then(() => setLoading(false));\n      setState({ name: '', number: '' });\n    }\n  };\n\n  const handleChange = e => {\n    const trimmedValue = e.target.value\n      .split(' ')\n      .map(str => str.trim())\n      .join(' ');\n\n    setState(prevState => ({\n      ...prevState,\n      [e.target.name]: trimmedValue,\n    }));\n  };\n\n  return (\n    <Box>\n      <Box className={css.inputBox}>\n        <TextField\n          className={css.input}\n          name=\"name\"\n          label=\"Contact Name\"\n          onChange={handleChange}\n          value={state.name}\n          type=\"text\"\n          required\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <AccountCircle />\n              </InputAdornment>\n            ),\n          }}\n          variant=\"standard\"\n        />\n        <TextField\n          className={css.input}\n          name=\"number\"\n          label=\"Contact Number\"\n          onChange={handleChange}\n          value={state.number}\n          type=\"tel\"\n          required\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <DialpadIcon />\n              </InputAdornment>\n            ),\n          }}\n          variant=\"standard\"\n        />\n      </Box>\n      <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n        <LoadingButton\n          className={css.addContactButton}\n          onClick={handleClick}\n          loading={loading}\n          loadingPosition=\"center\"\n          startIcon={<SaveIcon />}\n          variant=\"contained\"\n          type=\"submit\"\n        >\n          <span>Save</span>\n        </LoadingButton>\n      </Box>\n    </Box>\n  );\n}\n","import Box from '@mui/material/Box';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport TextField from '@mui/material/TextField';\nimport FilterAltIcon from '@mui/icons-material/FilterAlt';\n\nexport function ContactsFilter() {\n   const [state, setState] = useState({\n     input: '',\n   });\n   const dispatch = useDispatch();\n\n   useEffect(() => {\n     dispatch(filterContacts(state.input));\n   }, [state.input, dispatch]);\n\n   const onChange = e => {\n     setState(prevState => ({\n       ...prevState,\n       input: e.target.value,\n     }));\n   };\n  \n  return (\n    <Box sx={{ width: '100%', marginTop: \"20px\" }}>\n      <TextField\n        label=\"Filter by Name or Number\"\n        id=\"outlined-start-adornment\"\n        sx={{ width: '100%' }}\n\n        onChange={onChange}\n        value={state.input}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <FilterAltIcon />\n            </InputAdornment>\n          ),\n        }}\n      />\n    </Box>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"sortToggleSection\":\"ContactsSort_sortToggleSection__HQBhm\",\"sortToggleContainer\":\"ContactsSort_sortToggleContainer__uHAxq\"};","import css from './ContactsSort.module.css';\nimport { useState, useEffect } from 'react';\nimport Divider from '@mui/material/Divider';\nimport Paper from '@mui/material/Paper';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport TextRotateUpIcon from '@mui/icons-material/TextRotateUp';\nimport TextRotationDownIcon from '@mui/icons-material/TextRotationDown';\nimport { sortContacts } from 'redux/contacts/contactsSlice';\nimport { useDispatch } from 'react-redux';\nimport { Box } from '@mui/material';\nimport Tooltip from '@mui/material/Tooltip';\n\nexport function ContactsSort() {\n  const [sortMethod, setSortMethod] = useState({\n    name: 'firstName',\n    order: 'asc',\n  });\n  const [sortOption, setSortOption] = useState('left');\n  const [orderOption, setOrderOption] = useState('left');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(sortContacts(sortMethod));\n  }, [sortMethod, dispatch]);\n\n  const handleChange = e => {\n    const target = e.target.closest('button').id;\n\n    switch (target) {\n      case 'firstName':\n        setSortOption('left');\n        setSortMethod(prevState => ({\n          ...prevState,\n          name: 'firstName',\n        }));\n        break;\n      case 'lastName':\n        setSortOption('right');\n        setSortMethod(prevState => ({\n          ...prevState,\n          name: 'lastName',\n        }));\n        break;\n      case 'asc':\n        setOrderOption('left');\n        setSortMethod(prevState => ({\n          ...prevState,\n          order: 'asc',\n        }));\n        break;\n      case 'desc':\n        setOrderOption('right');\n        setSortMethod(prevState => ({\n          ...prevState,\n          order: 'desc',\n        }));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Box className={css.sortToggleSection}>\n      <h3>Sort Contacts</h3>\n      <Paper\n        className={css.sortToggleContainer}\n        elevation={4}\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <ToggleButtonGroup\n          color=\"primary\"\n          size=\"small\"\n          value={sortOption}\n          exclusive\n          onChange={handleChange}\n          aria-label=\"text alignment\"\n        >\n          <ToggleButton id=\"firstName\" value=\"left\" aria-label=\"left aligned\">\n            <Tooltip title=\"First Name\" placement=\"top\">\n              <FirstPageIcon />\n            </Tooltip>\n          </ToggleButton>\n          <ToggleButton id=\"lastName\" value=\"right\" aria-label=\"right aligned\">\n            <Tooltip title=\"Last Name\" placement=\"top\">\n              <LastPageIcon />\n            </Tooltip>\n          </ToggleButton>\n        </ToggleButtonGroup>\n        <Divider\n          variant=\"inset\"\n          flexItem\n          orientation=\"vertical\"\n          sx={{ mx: 1, my: 0.5, color: '#007bff' }}\n        />\n        <ToggleButtonGroup\n          color=\"primary\"\n          size=\"small\"\n          value={orderOption}\n          exclusive\n          onChange={handleChange}\n          aria-label=\"text alignment\"\n        >\n          <ToggleButton id=\"asc\" value=\"left\" aria-label=\"left aligned\">\n            <Tooltip title=\"Ascending\" placement=\"top\">\n              <TextRotationDownIcon />\n            </Tooltip>\n          </ToggleButton>\n          <ToggleButton id=\"desc\" value=\"right\" aria-label=\"right aligned\">\n            <Tooltip title=\"Descending\" placement=\"top\">\n              <TextRotateUpIcon />\n            </Tooltip>\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </Paper>\n    </Box>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsListSection\":\"ContactList_contactsListSection__cWqG0\",\"contactListItem\":\"ContactList_contactListItem__3th7-\",\"editableContact\":\"ContactList_editableContact__AOyjp\",\"contactName\":\"ContactList_contactName__wLcl6\",\"contactNumber\":\"ContactList_contactNumber__aD17w\",\"contactAction\":\"ContactList_contactAction__NNKVZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"speedDial\":\"ContactsItemActions_speedDial__Rd-oJ\"};","import { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport StyledSpeedDial from '@mui/material/SpeedDial';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SpeedDialAction from '@mui/material/SpeedDialAction';\nimport EditNoteIcon from '@mui/icons-material/EditNote';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport css from './ContactsItemActions.module.css';\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\n\nconst actions = [\n  { icon: <EditNoteIcon />, tooltip: 'Edit' },\n  { icon: <SaveIcon />, tooltip: 'Save' },\n  { icon: <CancelIcon />, tooltip: 'Cancel' },\n  { icon: <DeleteForeverIcon />, tooltip: 'Delete' },\n];\n\nexport function ContactsItemActions({\n  editableContactId,\n  contactId,\n  editSaveError,\n  handleSaveClick,\n  handleEditClick,\n  handleCancelClick,\n}) {\n  const [open, setOpen] = useState(false);\n  const [actionClicked, setActionClicked] = useState(false);\n  const dispatch = useDispatch();\n  const errorRef = useRef(null);\n\n  const handleActionEvent = e => {\n    try {\n      if (e.type === 'mouseleave' && actionClicked) {\n        return;\n      } else if (e.type === 'mouseleave' && !actionClicked) {\n        setOpen(false);\n        return;\n      } else if (e.type === 'mouseenter') {\n        setOpen(true);\n        return;\n      } else if (e.type === 'click') {\n        const target = e.target.closest('svg').dataset.testid;\n        switch (target) {\n          case 'EditIcon':\n            setOpen(true);\n            setActionClicked(true);\n            break;\n          case 'AddIcon':\n            setOpen(false);\n            setActionClicked(false);\n            break;\n          case 'SaveIcon':\n            setOpen(false);\n            setActionClicked(false);\n            break;\n          case 'CancelIcon':\n            setOpen(false);\n            setActionClicked(false);\n            break;\n          case 'DeleteIcon':\n            setOpen(false);\n            setActionClicked(false);\n            break;\n          case 'EditNoteIcon':\n            setOpen(true);\n            setActionClicked(true);\n            break;\n          default:\n            return;\n        }\n      }\n    } catch (error) {\n      errorRef.current = error;\n    }\n  };\n\n\n  return (\n    <Box sx={{}}>\n      <StyledSpeedDial\n        sx={{ position: 'relative' }}\n        ariaLabel=\"SpeedDial tooltip example\"\n        id=\"speedDial\"\n        className={css.speedDial}\n        icon={<SpeedDialIcon openIcon={<EditIcon />} />}\n        direction=\"left\"\n        onOpen={handleActionEvent}\n        onClose={handleActionEvent}\n        onClick={handleActionEvent}\n        open={open}\n      >\n        {editableContactId === contactId\n          ? [\n              <SpeedDialAction\n                key=\"save\"\n                id=\"save\"\n                className={css.contactItemBtn}\n                icon={actions[1].icon}\n                tooltipTitle={actions[1].tooltip}\n                onClick={() => {\n                  handleSaveClick(contactId);\n                }}\n              />,\n              <SpeedDialAction\n                key=\"cancel\"\n                id=\"cancel\"\n                className={css.contactItemBtn}\n                icon={actions[2].icon}\n                tooltipTitle={actions[2].tooltip}\n                onClick={() => {\n                  handleCancelClick();\n                }}\n              />,\n            ]\n          : [\n              <SpeedDialAction\n                key=\"edit\"\n                id=\"edit\"\n                className={css.contactItemBtn}\n                icon={actions[0].icon}\n                tooltipTitle={actions[0].tooltip}\n                onClick={() => {\n                  handleEditClick(contactId);\n                }}\n              />,\n              <SpeedDialAction\n                key=\"delete\"\n                id=\"delete\"\n                className={css.contactItemBtn}\n                icon={actions[3].icon}\n                tooltipTitle={actions[3].tooltip}\n                onClick={() => {\n                  dispatch(deleteContact(contactId));\n                }}\n              />,\n            ]}\n      </StyledSpeedDial>\n    </Box>\n  );\n}\n\nContactsItemActions.propTypes = {\n  editableContactId: PropTypes.string,\n  contactId: PropTypes.string.isRequired,\n  handleSaveClick: PropTypes.func.isRequired,\n  handleEditClick: PropTypes.func.isRequired,\n  handleCancelClick: PropTypes.func.isRequired,\n};\n","import css from './ContactList.module.css';\nimport ContentEditable from 'react-contenteditable';\nimport DOMPurify from 'dompurify';\nimport { useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport {\n  sortContactsList,\n  filterContactsList,\n  isNameOrNumEdited,\n  isNameOrNumAvail,\n} from 'services/contactListFunc';\nimport { Notify } from 'notiflix';\nimport { useContacts } from 'hooks/useContacts';\nimport { ContactsItemActions } from 'components/ContactsItemActions/ContactsItemActions';\nimport { Paper } from '@mui/material';\nimport { ProgressBar } from 'react-loader-spinner';\nimport Tooltip from '@mui/material/Tooltip';\n\nexport const ContactList = () => {\n  const [editedContactNameSavedId, setEditedContactNameSavedId] =\n    useState(null);\n  const [editedContactNumberSavedId, setEditedContactNumberSavedId] =\n    useState(null);\n  const [editableContactId, setEditableContactId] = useState(null);\n  const [editSaveError, setEditSaveError] = useState(false);\n  const editedContactsRef = useRef({});\n  const dispatch = useDispatch();\n  const { contacts, filter, sortOptions } = useContacts();\n  const sortedContacts = sortContactsList(contacts, sortOptions);\n  const filteredContacts = filterContactsList(sortedContacts, filter);\n\n  const handleEditClick = id => {\n    setEditableContactId(id);\n    editedContactsRef.current[id] = {\n      ...contacts.find(contact => contact.id === id),\n    };\n  };\n\n  const handleCancelClick = () => {\n    editedContactsRef.current = {};\n    setEditableContactId(null);\n    setEditedContactNameSavedId(null);\n    setEditedContactNumberSavedId(null);\n  };\n\n  const handleSaveClick = id => {\n    if (\n      editedContactsRef.current[id].name === '' ||\n      editedContactsRef.current[id].number === '' ||\n      editedContactsRef.current[id].name.length > 30 ||\n      editedContactsRef.current[id].number.length > 25\n    ) {\n      Notify.failure(\n        'Please check the name and number fields are completed correctly and resubmit'\n      );\n      setEditSaveError(true);\n      return;\n    }\n    const contactsToCompare = contacts.filter(contact => contact.id !== id);\n    const { isNameEdited, isNumberEdited } = isNameOrNumEdited(\n      contacts,\n      id,\n      editedContactsRef\n    );\n    const { isNameAvail, isNumAvail } = isNameOrNumAvail(\n      contactsToCompare,\n      editedContactsRef,\n      id\n    );\n\n    if (isNameAvail && isNumAvail) {\n      Notify.failure(\n        `${editedContactsRef.current[id].name} & ${\n          editedContactsRef.current[id.number]\n        } is already in contacts. Please check and resubmit`\n      );\n      setEditSaveError(true);\n      return;\n    } else if (isNumAvail && !isNameAvail) {\n      Notify.failure(\n        `${editedContactsRef.current[id].number} is already in contacts. Please check and resubmit`\n      );\n      setEditSaveError(true);\n      return;\n    } else if (!isNumAvail && isNameAvail) {\n      Notify.failure(\n        `${editedContactsRef.current[id].name} is already in contacts. Please check and resubmit`\n      );\n      setEditSaveError(true);\n      return;\n    } else {\n      isNameEdited && setEditedContactNameSavedId(id);\n      isNumberEdited && setEditedContactNumberSavedId(id);\n      dispatch(\n        updateContact({ editedContact: editedContactsRef.current[id] })\n      ).then(() => {\n        setEditedContactNumberSavedId(null);\n        setEditedContactNameSavedId(null);\n      });\n      setEditableContactId(null);\n      editedContactsRef.current = {};\n      setEditSaveError(false);\n    }\n  };\n\n  const handleContactChange = (e, id) => {\n    const value = document.activeElement.innerText;\n    const sanitizedValue = DOMPurify.sanitize(value);\n    const trimmedValue = sanitizedValue.trim();\n    const dataset = e.currentTarget.dataset.value;\n    editedContactsRef.current[id][dataset] = trimmedValue;\n  };\n\n  const handlePaste = e => {\n    e.preventDefault();\n    const text = e.clipboardData.getData('text/plain');\n    const sanitizedText = DOMPurify.sanitize(text);\n    document.execCommand('insertText', false, sanitizedText);\n  };\n\n  const handleKeyPress = e => {\n    if (e.which === 13) {\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <section className={css.contactsListSection}>\n      <Paper elevation={6} sx={{ padding: '0 15px 15px 15px' }}>\n        <ul className={css.contactList}>\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(contact => (\n              <li key={contact.id} className={css.contactListItem}>\n                <span className={css.contactName}>\n                  {editableContactId === contact.id ? (\n                    <Tooltip\n                      title=\"Must be between 1 and 30 characters long\"\n                      placement=\"top\"\n                    >\n                      <div>\n                        <ContentEditable\n                          className={css.editableContact}\n                          html={contact.name}\n                          disabled={false}\n                          data-value=\"name\"\n                          onChange={e => handleContactChange(e, contact.id)}\n                          onPaste={handlePaste}\n                          onKeyDown={handleKeyPress}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : editedContactNameSavedId === contact.id ? (\n                    <ProgressBar\n                      height=\"60\"\n                      width=\"80\"\n                      ariaLabel=\"progress-bar-loading\"\n                      wrapperStyle={{}}\n                      wrapperClass=\"progress-bar-wrapper\"\n                      borderColor=\"#007bff\"\n                      barColor=\"#007bff\"\n                    />\n                  ) : (\n                    <span dangerouslySetInnerHTML={{ __html: contact.name }} />\n                  )}\n                </span>\n                <span className={css.contactNumber}>\n                  {editableContactId === contact.id ? (\n                    <Tooltip\n                      title=\"Must be between 1 and 25 characters long\"\n                      placement=\"top\"\n                    >\n                      <div>\n                        <ContentEditable\n                          className={css.editableContact}\n                          html={contact.number}\n                          disabled={false}\n                          data-value=\"number\"\n                          onChange={e => handleContactChange(e, contact.id)}\n                          onPaste={handlePaste}\n                          onKeyDown={handleKeyPress}\n                        />\n                      </div>\n                    </Tooltip>\n                  ) : editedContactNumberSavedId === contact.id ? (\n                    <>\n                      <ProgressBar\n                        height=\"60\"\n                        width=\"100%\"\n                        ariaLabel=\"progress-bar-loading\"\n                        wrapperStyle={{}}\n                        wrapperClass=\"progress-bar-wrapper\"\n                        borderColor=\"#007bff\"\n                        barColor=\"#007bff\"\n                      />\n                    </>\n                  ) : (\n                    <span\n                      dangerouslySetInnerHTML={{ __html: contact.number }}\n                    />\n                  )}\n                </span>\n                <span className={css.contactAction}>\n                  <ContactsItemActions\n                    contactId={contact.id}\n                    editableContactId={editableContactId}\n                    editSaveError={editSaveError}\n                    handleEditClick={handleEditClick}\n                    handleCancelClick={handleCancelClick}\n                    handleSaveClick={handleSaveClick}\n                  />\n                </span>\n              </li>\n            ))\n          ) : (\n            <li className={css.noContactsItem}>\n              <p colSpan={3} className={css.noContactsText}>\n                No contacts meet search criteria.\n              </p>\n            </li>\n          )}\n        </ul>\n      </Paper>\n    </section>\n  );\n};\n","export const sortContactsList = (contacts, sortOptions) => {\n  const { name, order } = sortOptions;\n  let sortName = name;\n  let sortOrder = order;\n  const sortedContacts = [...contacts].sort((a, b) => {\n    let nameA;\n    let nameB;\n    if (sortName === 'firstName') {\n      nameA = a.name.split(' ')[0];\n      nameB = b.name.split(' ')[0];\n    } else if (sortName === 'lastName') {\n      nameA = a.name.split(' ');\n      nameB = b.name.split(' ');\n      nameA = nameA[nameA.length - 1];\n      nameB = nameB[nameB.length - 1];\n    }\n    return sortOrder === 'asc'\n      ? nameA.localeCompare(nameB)\n      : nameB.localeCompare(nameA);\n  });\n  return sortedContacts;\n};\n\nexport const filterContactsList = (sortedContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return !normalizedFilter ? sortedContacts : sortedContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter) ||\n    contact.number.includes(normalizedFilter)\n  );\n};\n\nexport const isNameOrNumEdited = (contacts, id, editedContactRef) => {\n  const contact = contacts.find(contact => contact.id === id);\n  const { name, number } = contact;\n  const { name: editedName, number: editedNumber } = editedContactRef.current[id];\n\n  const isNameEdited = name !== editedName;\n  const isNumberEdited = number !== editedNumber;\n\n  return { isNameEdited, isNumberEdited };\n}\n\nexport const isNameOrNumAvail = (contacts, editedContactRef, id) => {\n  const { name, number } = editedContactRef.current[id];\n  const isNameAvail = contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n  const isNumAvail = contacts.some(contact => contact.number === number);\n  return { isNameAvail, isNumAvail };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsTitle\":\"Contacts_contactsTitle__9axPf\",\"noContactsText\":\"Contacts_noContactsText__vPXb2\"};","// extracted by mini-css-extract-plugin\nexport default {};","import css from './PhonebookActions.module.css';\nimport { useRef, useState } from 'react';\nimport PersonAddAlt1Icon from '@mui/icons-material/PersonAddAlt1';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ReduceCapacityIcon from '@mui/icons-material/ReduceCapacity';\nimport Tooltip from '@mui/material/Tooltip';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport { Box } from '@mui/material';\nimport Paper from '@mui/material/Paper';\nimport { useDispatch } from 'react-redux';\nimport { useContacts } from 'hooks/useContacts';\nimport { updatePhonebookOptions } from 'redux/contacts/contactsSlice';\n\nexport function PhonebookActions() {\n  const [activeButton, setActiveButton] = useState(() => []);\n  const dispatch = useDispatch();\n  const { phonebookOptions } = useContacts();\n  const errorRef = useRef(null);\n\n  const handleChange = (e, newActiveButton) => {\n    setActiveButton(newActiveButton);\n    const target = e.target.closest('button').id;\n\n    try {\n      switch (target) {\n        case 'add':\n          dispatch(\n            updatePhonebookOptions({\n              ...phonebookOptions,\n              addContact: !phonebookOptions.addContact,\n            })\n          );\n          break;\n        case 'sort':\n          dispatch(\n            updatePhonebookOptions({\n              ...phonebookOptions,\n              sortContacts: !phonebookOptions.sortContacts,\n            })\n          );\n          break;\n        case 'filter':\n          dispatch(\n            updatePhonebookOptions({\n              ...phonebookOptions,\n              filterContacts: !phonebookOptions.filterContacts,\n            })\n          );\n          break;\n        default:\n          return;\n      }\n    } catch (error) {\n      errorRef.current = error;\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '20px',\n      }}\n    >\n      <Paper\n        className={css.phonebookToggleContainer}\n        elevation={4}\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n          width: 'fit-content',\n        }}\n      >\n        <ToggleButtonGroup\n          color=\"primary\"\n          size=\"small\"\n          value={activeButton}\n          onChange={handleChange}\n          aria-label=\"phonebook actions\"\n        >\n          <ToggleButton id=\"add\" value=\"add contact\" aria-label=\"add contact\">\n            <Tooltip title=\"Add Contact\" placement=\"top\">\n              <PersonAddAlt1Icon />\n            </Tooltip>\n          </ToggleButton>\n          <ToggleButton\n            id=\"sort\"\n            value=\"sort contacts\"\n            aria-label=\"sort contacts\"\n          >\n            <Tooltip title=\"Sort Contact\" placement=\"top\">\n              <SortIcon />\n            </Tooltip>\n          </ToggleButton>\n          <ToggleButton\n            id=\"filter\"\n            value=\"filter contacts\"\n            aria-label=\"filter contacts\"\n          >\n            <Tooltip title=\"Filter Contact\" placement=\"top\">\n              <ReduceCapacityIcon />\n            </Tooltip>\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </Paper>\n    </Box>\n  );\n}\n","import { ContactsForm } from 'components/ContactsForm/ContactsForm.jsx';\nimport { ContactsFilter } from 'components/ContactsFilter/ContactsFilter.jsx';\nimport { ContactsSort } from 'components/ContactsSort/ContactsSort.jsx';\nimport { ContactList } from 'components/ContactList/ContactList.jsx';\nimport css from './Contacts.module.css';\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { useContacts } from 'hooks/useContacts';\nimport { useAuth } from 'hooks/useAuth';\nimport Loader from 'components/Loader/Loader';\nimport { PhonebookActions } from 'components/PhonebookActions/PhonebookActions';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const [onMount, setOnMount] = useState(true);\n  const { contacts, phonebookOptions } = useContacts();\n  const { isLoggedIn, user } = useAuth();\n  const { addContact, sortContacts, filterContacts } = phonebookOptions;\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    } else {\n      dispatch(fetchContacts()).then(() => setOnMount(false));\n    }\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <section className={css.phonebook}>\n      <h1 className={css.contactsTitle}>{`${user.name} Contacts`}</h1>\n\n      {onMount && <Loader />}\n      {contacts.length >= 2 && !onMount ? (\n        <>\n          <PhonebookActions />\n          {addContact && <ContactsForm />}\n          {filterContacts && <ContactsFilter />}\n          {sortContacts && <ContactsSort />}\n          <ContactList />\n        </>\n      ) : contacts.length === 1 && !onMount ? (\n        <>\n          <ContactsForm />\n          <ContactList />\n        </>\n      ) : contacts.length < 1 && !onMount ? (\n        <>\n          <ContactsForm />\n          <h5 className={css.noContactsText}>\n            No contacts found. Complete the above form to begin adding contacts.\n          </h5>\n        </>\n      ) : null}\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getSortOptions","sortOptions","getIsLoading","isLoading","getError","error","getPhonebookOptions","phonebookOptions","useContacts","useSelector","ContactsForm","useState","loading","setLoading","name","number","setState","dispatch","useDispatch","handleChange","e","trimmedValue","target","value","split","map","str","trim","join","prevState","Box","className","css","TextField","label","onChange","type","required","InputProps","startAdornment","InputAdornment","position","AccountCircle","variant","Dialpad","sx","display","justifyContent","LoadingButton","onClick","preventDefault","newContact","find","contact","toLowerCase","Notify","addContact","then","loadingPosition","startIcon","Save","ContactsFilter","input","useEffect","filterContacts","width","marginTop","id","endAdornment","FilterAlt","ContactsSort","order","sortMethod","setSortMethod","sortOption","setSortOption","orderOption","setOrderOption","sortContacts","closest","Paper","elevation","ToggleButtonGroup","color","size","exclusive","ToggleButton","Tooltip","title","placement","FirstPage","LastPage","Divider","flexItem","orientation","mx","my","TextRotationDown","TextRotateUp","actions","icon","EditNote","tooltip","Cancel","DeleteForever","ContactsItemActions","editableContactId","contactId","handleSaveClick","editSaveError","handleEditClick","handleCancelClick","open","setOpen","actionClicked","setActionClicked","errorRef","useRef","handleActionEvent","dataset","testid","current","ariaLabel","SpeedDialIcon","openIcon","Edit","direction","onOpen","onClose","SpeedDialAction","tooltipTitle","deleteContact","ContactList","editedContactNameSavedId","setEditedContactNameSavedId","editedContactNumberSavedId","setEditedContactNumberSavedId","setEditableContactId","setEditSaveError","editedContactsRef","sortedContacts","sortName","sortOrder","sort","a","b","nameA","nameB","length","localeCompare","sortContactsList","filteredContacts","normalizedFilter","includes","filterContactsList","contactsToCompare","editedContactRef","isNameEdited","isNumberEdited","isNameOrNumEdited","isNameAvail","some","isNumAvail","isNameOrNumAvail","updateContact","editedContact","handleContactChange","document","activeElement","innerText","DOMPurify","currentTarget","handlePaste","text","clipboardData","getData","sanitizedText","execCommand","handleKeyPress","which","padding","html","disabled","onPaste","onKeyDown","height","wrapperStyle","wrapperClass","borderColor","barColor","dangerouslySetInnerHTML","__html","colSpan","PhonebookActions","activeButton","setActiveButton","newActiveButton","updatePhonebookOptions","PersonAddAlt1","Sort","ReduceCapacity","Contacts","onMount","setOnMount","useAuth","isLoggedIn","user","fetchContacts","Loader"],"sourceRoot":""}