{"version":3,"file":"static/js/599.714c4650.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/contactsSelectors.js","hooks/useContacts.jsx","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Sort/Sort.module.css?d8cd","components/Sort/Sort.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Buttons/Buttons.module.css?0481","components/Buttons/Buttons.jsx","components/ContactList/ContactList.jsx","services/contactListFunc.js","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"inputLabel\":\"ContactForm_inputLabel__LEeFC\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formBtn\":\"ContactForm_formBtn__qZGY3\"};","export const getContacts = state => state.contacts.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getSortOptions = state => state.contacts.sortOptions;\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\nexport const getError = state => state.contacts.contacts.error;","import { useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getFilter,\n  getSortOptions,\n  getError,\n  getIsLoading,\n} from 'redux/contacts/contactsSelectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const sortOptions = useSelector(getSortOptions);\n  const error = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n\n  return {\n    contacts,\n    filter,\n    sortOptions,\n    error,\n    isLoading,\n  };\n};\n","import css from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { useContacts } from 'hooks/useContacts';\n\nexport const ContactForm = () => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = state;\n    const newContact = {\n      name,\n      number,\n    };\n    const existingContact = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n    if (existingContact) {\n      alert(`${name} or ${number} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    setState({ name: '', number: '' });\n  };\n\n  const onChange = e => {\n    const trimmedValue = e.target.value\n      .split(' ')\n      .map(str => str.trim())\n      .join(' ');\n\n    setState(prevState => ({\n      ...prevState,\n      [e.target.name]: trimmedValue,\n    }));\n  };\n\n  return (\n    <section className={css.formSection}>\n      <form className={css.contactForm} onSubmit={handleSubmit}>\n        <label className={(css.inputNameLabel, css.inputLabel)}>\n          Name\n          <input\n            className={(css.inputName, css.formInput)}\n            onChange={onChange}\n            value={state.name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n            required\n          />\n        </label>\n        <label className={(css.inputNumLabel, css.inputLabel)}>\n          Number\n          <input\n            className={(css.inputNum, css.formInput)}\n            onChange={onChange}\n            value={state.number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={css.formBtn} type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"Filter_filterContainer__8G57N\",\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import css from './Filter.module.css';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\n\nexport const Filter = () => {\n  const [state, setState] = useState({\n    input: '',\n  });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(filterContacts(state.input));\n  }, [state.input, dispatch]);\n\n  const onChange = e => {\n    setState(prevState => ({\n      ...prevState,\n      input: e.target.value,\n    }));\n  };\n\n  return (\n    <section className={css.filterSection}>\n      <div className={css.filterContainer}>\n        <p className={css.filterTitle}>Search contacts by name or number</p>\n        <input\n          className={css.filterInput}\n          type=\"text\"\n          onChange={onChange}\n          value={state.input}\n        ></input>\n      </div>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"sortContainer\":\"Sort_sortContainer__2DpMN\",\"sortOptionContainer\":\"Sort_sortOptionContainer__IMYq3\",\"sortWrapper\":\"Sort_sortWrapper__VqLXH\",\"sortTitle\":\"Sort_sortTitle__YmJcn\",\"sortOption\":\"Sort_sortOption__dF0Zh\",\"sortButton\":\"Sort_sortButton__CPLkG\",\"switch\":\"Sort_switch__4uxDt\",\"slider\":\"Sort_slider__9FHYi\"};","import css from './Sort.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowDownAZ,\n  faArrowDownZA,\n} from '@fortawesome/free-solid-svg-icons';\nimport { sortContacts } from 'redux/contacts/contactsSlice';\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\n\nexport const Sort = () => {\n  const [isChecked, setIsChecked] = useState({\n    name: false,\n    order: false,\n  });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(sortContacts(isChecked));\n  }, [isChecked, dispatch]);\n\n  const onChange = event => {\n    const value = event.target.dataset.value;\n    const checked = event.target.checked;\n\n    setIsChecked(prevState => ({\n      ...prevState,\n      [value]: checked,\n    }));\n  };\n\n  return (\n    <section className={css.sortSection}>\n      <div className={css.sortContainer}>\n        <p className={css.sortTitle}>Sort contacts by name</p>\n        <div className={css.sortOptionContainer}>\n          <p className={css.sortOption}>First Name</p>\n          <div className={css.sortWrapper}>\n            <label className={css.switch}>\n              <input\n                data-value=\"name\"\n                type=\"checkbox\"\n                onChange={onChange}\n              ></input>\n              <span className={css.slider}></span>\n            </label>\n          </div>\n          <p className={css.sortOption}>Last Name</p>\n        </div>\n        <div className={css.sortOptionContainer}>\n          <FontAwesomeIcon\n            icon={faArrowDownAZ}\n            size=\"lg\"\n            style={{ color: '#4e4e4e' }}\n          />\n          <div className={css.sortWrapper}>\n            <label className={css.switch}>\n              <input\n                data-value=\"order\"\n                type=\"checkbox\"\n                onChange={onChange}\n              ></input>\n              <span className={css.slider}></span>\n            </label>\n          </div>\n          <FontAwesomeIcon\n            icon={faArrowDownZA}\n            size=\"lg\"\n            style={{ color: '#4e4e4e' }}\n          />\n        </div>\n      </div>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsListSection\":\"ContactList_contactsListSection__cWqG0\",\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactItemNumer\":\"ContactList_contactItemNumer__VuqTQ\",\"contactsTable\":\"ContactList_contactsTable__dYkGk\",\"editableContact\":\"ContactList_editableContact__AOyjp\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactItemBtn\":\"Buttons_contactItemBtn__ykTTg\"};","import css from './Buttons.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nexport const Buttons = ({\n  editableContactId,\n  contactId,\n  handleSaveClick,\n  handleEditClick,\n  handleCancelClick,\n}) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      {editableContactId === contactId ? (\n        <>\n          <button\n            className={css.contactItemBtn}\n            onClick={() => handleSaveClick(contactId)}\n          >\n            Save\n          </button>\n          <button className={css.contactItemBtn} onClick={handleCancelClick}>\n            Cancel\n          </button>\n        </>\n      ) : (\n        <>\n          <button\n            className={css.contactItemBtn}\n            onClick={() => handleEditClick(contactId)}\n          >\n            Edit\n          </button>\n          <button\n            className={css.contactItemBtn}\n            onClick={() => dispatch(deleteContact(contactId))}\n          >\n            Delete\n          </button>\n        </>\n      )}\n    </>\n  );\n};\n","import css from './ContactList.module.css';\nimport ContentEditable from 'react-contenteditable';\nimport sanitize from 'sanitize-html';\nimport { useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport { sortContactsList, filterContactsList } from 'services/contactListFunc';\nimport { Buttons } from 'components/Buttons/Buttons';\nimport { Notify } from 'notiflix';\nimport { useContacts } from 'hooks/useContacts';\n\nexport const ContactList = () => {\n  const [editableContactId, setEditableContactId] = useState(null);\n  const editedContactsRef = useRef({});\n  const dispatch = useDispatch();\n  const { contacts, filter, sortOptions } = useContacts();\n  const sortedContacts = sortContactsList(contacts, sortOptions);\n  const filteredContacts = filterContactsList(sortedContacts, filter);\n\n  const handleEditClick = id => {\n    setEditableContactId(id);\n    editedContactsRef.current[id] = {\n      ...contacts.find(contact => contact.id === id),\n    };\n  };\n\n  const handleCancelClick = () => {\n    setEditableContactId(null);\n    editedContactsRef.current = {};\n  };\n\n  const handleSaveClick = id => {\n    const contactsToCompare = contacts.filter(contact => contact.id !== id);\n\n    const existingContact = contactsToCompare.find(\n      contact =>\n        contact.name.toLowerCase() ===\n          editedContactsRef.current[id].name.toLowerCase() ||\n        contact.number === editedContactsRef.current[id].number\n    );\n\n    if (existingContact) {\n      Notify.failure(\n        `${editedContactsRef.current[id].name} is already in contacts. Please check and resubmit`\n      );\n      return;\n    } else {\n      dispatch(updateContact({ editedContact: editedContactsRef.current[id] }));\n      setEditableContactId(null);\n      editedContactsRef.current = {};\n    }\n  };\n\n  const handleContactChange = (e, id) => {\n    const value = e.target.value;\n    const dataset = e.currentTarget.dataset.value;\n    const sanitizedValue = sanitize(value);\n    editedContactsRef.current[id][dataset] = sanitizedValue;\n  };\n\n  return (\n    <section className={css.contactsListSection}>\n      <table className={css.contactsTable}>\n        <thead>\n          <tr>\n            <th colSpan={3}>\n              <h1>Contacts</h1>\n            </th>\n          </tr>\n          <tr>\n            <th>Name</th>\n            <th>Number</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredContacts.length > 0 ? (\n            <>\n              {filteredContacts.map(contact => (\n                <tr key={contact.id}>\n                  <td>\n                    {' '}\n                    {editableContactId === contact.id ? (\n                      <ContentEditable\n                        className={css.editableContact}\n                        html={contact.name}\n                        disabled={false}\n                        data-value=\"name\"\n                        onChange={e => handleContactChange(e, contact.id)}\n                      />\n                    ) : (\n                      contact.name\n                    )}\n                  </td>\n                  <td>\n                    {editableContactId === contact.id ? (\n                      <ContentEditable\n                        className={css.editableContact}\n                        html={contact.number}\n                        disabled={false}\n                        data-value=\"number\"\n                        onChange={e => handleContactChange(e, contact.id)}\n                      />\n                    ) : (\n                      contact.number\n                    )}\n                  </td>\n                  <td>\n                    <Buttons\n                      contactId={contact.id}\n                      editableContactId={editableContactId}\n                      handleEditClick={handleEditClick}\n                      handleCancelClick={handleCancelClick}\n                      handleSaveClick={handleSaveClick}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </>\n          ) : (\n            <tr>\n              <td colSpan={3} className={css.noContacts}>\n                No contacts meet search criteria.\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </section>\n  );\n};\n","export const sortContactsList = (contacts, sortOptions) => {\n  const { name, order } = sortOptions;\n  let sortName = name ? 'lastName' : 'firstName';\n  let sortOrder = order ? 'desc' : 'asc';\n  const sortedContacts = [...contacts].sort((a, b) => {\n    let nameA;\n    let nameB;\n    if (sortName === 'firstName') {\n      nameA = a.name.split(' ')[0];\n      nameB = b.name.split(' ')[0];\n    } else if (sortName === 'lastName') {\n      nameA = a.name.split(' ');\n      nameB = b.name.split(' ');\n      nameA = nameA[nameA.length - 1];\n      nameB = nameB[nameB.length - 1];\n    }\n    return sortOrder === 'asc'\n      ? nameA.localeCompare(nameB)\n      : nameB.localeCompare(nameA);\n  });\n  return sortedContacts;\n};\n\nexport const filterContactsList = (sortedContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return !normalizedFilter ? sortedContacts : sortedContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter) ||\n    contact.number.includes(normalizedFilter)\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsTitle\":\"Contacts_contactsTitle__9axPf\"};","import { ContactForm } from 'components/ContactForm/ContactForm.jsx';\nimport { Filter } from 'components/Filter/Filter.jsx';\nimport { Sort } from 'components/Sort/Sort.jsx';\nimport { ContactList } from 'components/ContactList/ContactList.jsx';\nimport css from './Contacts.module.css';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { useContacts } from 'hooks/useContacts';\nimport { useAuth } from 'hooks/useAuth';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const { contacts, isLoading } = useContacts();\n  const { isLoggedIn, user } = useAuth();\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    } else {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <section className={css.contacts}>\n      <h1 className={css.contactsTitle}>{`${user.name} Contacts`}</h1>\n      <ContactForm />\n      {isLoading && <h5>Loading...</h5>}\n      { contacts.length >= 2 ? (\n        <>\n          <Filter />\n          <Sort />\n          <ContactList />\n        </>\n      ) : contacts.length === 1 ? (\n        <ContactList />\n      ) : contacts.length < 1 && !isLoading ? (\n        <h5>\n          No contacts found. Complete the above form to begin adding contacts.\n        </h5>\n      ) : null}\n\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getSortOptions","sortOptions","getIsLoading","isLoading","getError","error","useContacts","useSelector","ContactForm","useState","name","number","setState","dispatch","useDispatch","onChange","e","trimmedValue","target","value","split","map","str","trim","join","prevState","className","css","onSubmit","preventDefault","newContact","find","contact","toLowerCase","alert","addContact","type","pattern","title","required","Filter","input","useEffect","filterContacts","Sort","order","isChecked","setIsChecked","sortContacts","event","dataset","checked","icon","faArrowDownAZ","size","style","color","faArrowDownZA","Buttons","editableContactId","contactId","handleSaveClick","handleEditClick","handleCancelClick","onClick","deleteContact","ContactList","setEditableContactId","editedContactsRef","useRef","sortedContacts","sortName","sortOrder","sort","a","b","nameA","nameB","length","localeCompare","sortContactsList","filteredContacts","normalizedFilter","includes","filterContactsList","id","current","Notify","updateContact","editedContact","handleContactChange","currentTarget","sanitizedValue","sanitize","colSpan","html","disabled","Contacts","useAuth","isLoggedIn","user","fetchContacts"],"sourceRoot":""}